// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protos/fibonacci.proto

/*
Package fibonacci is a generated protocol buffer package.

It is generated from these files:
	protos/fibonacci.proto

It has these top-level messages:
	FibonacciRequest
	FibonacciResponse
*/
package fibonacci

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type FibonacciRequest struct {
	N int32 `protobuf:"varint,1,opt,name=n" json:"n,omitempty"`
}

func (m *FibonacciRequest) Reset()                    { *m = FibonacciRequest{} }
func (m *FibonacciRequest) String() string            { return proto.CompactTextString(m) }
func (*FibonacciRequest) ProtoMessage()               {}
func (*FibonacciRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *FibonacciRequest) GetN() int32 {
	if m != nil {
		return m.N
	}
	return 0
}

type FibonacciResponse struct {
	FN int32 `protobuf:"varint,1,opt,name=f_n,json=fN" json:"f_n,omitempty"`
}

func (m *FibonacciResponse) Reset()                    { *m = FibonacciResponse{} }
func (m *FibonacciResponse) String() string            { return proto.CompactTextString(m) }
func (*FibonacciResponse) ProtoMessage()               {}
func (*FibonacciResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *FibonacciResponse) GetFN() int32 {
	if m != nil {
		return m.FN
	}
	return 0
}

func init() {
	proto.RegisterType((*FibonacciRequest)(nil), "fibonacci.FibonacciRequest")
	proto.RegisterType((*FibonacciResponse)(nil), "fibonacci.FibonacciResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for FibonnaciService service

type FibonnaciServiceClient interface {
	GetFibonnaciNumber(ctx context.Context, in *FibonacciRequest, opts ...grpc.CallOption) (*FibonacciResponse, error)
}

type fibonnaciServiceClient struct {
	cc *grpc.ClientConn
}

func NewFibonnaciServiceClient(cc *grpc.ClientConn) FibonnaciServiceClient {
	return &fibonnaciServiceClient{cc}
}

func (c *fibonnaciServiceClient) GetFibonnaciNumber(ctx context.Context, in *FibonacciRequest, opts ...grpc.CallOption) (*FibonacciResponse, error) {
	out := new(FibonacciResponse)
	err := grpc.Invoke(ctx, "/fibonacci.FibonnaciService/GetFibonnaciNumber", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for FibonnaciService service

type FibonnaciServiceServer interface {
	GetFibonnaciNumber(context.Context, *FibonacciRequest) (*FibonacciResponse, error)
}

func RegisterFibonnaciServiceServer(s *grpc.Server, srv FibonnaciServiceServer) {
	s.RegisterService(&_FibonnaciService_serviceDesc, srv)
}

func _FibonnaciService_GetFibonnaciNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FibonacciRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FibonnaciServiceServer).GetFibonnaciNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fibonacci.FibonnaciService/GetFibonnaciNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FibonnaciServiceServer).GetFibonnaciNumber(ctx, req.(*FibonacciRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FibonnaciService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "fibonacci.FibonnaciService",
	HandlerType: (*FibonnaciServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFibonnaciNumber",
			Handler:    _FibonnaciService_GetFibonnaciNumber_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/fibonacci.proto",
}

func init() { proto.RegisterFile("protos/fibonacci.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 149 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2b, 0x28, 0xca, 0x2f,
	0xc9, 0x2f, 0xd6, 0x4f, 0xcb, 0x4c, 0xca, 0xcf, 0x4b, 0x4c, 0x4e, 0xce, 0xd4, 0x03, 0x0b, 0x08,
	0x71, 0xc2, 0x05, 0x94, 0x14, 0xb8, 0x04, 0xdc, 0x60, 0x9c, 0xa0, 0xd4, 0xc2, 0xd2, 0xd4, 0xe2,
	0x12, 0x21, 0x1e, 0x2e, 0xc6, 0x3c, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xd6, 0x20, 0xc6, 0x3c, 0x25,
	0x15, 0x2e, 0x41, 0x24, 0x15, 0xc5, 0x05, 0xf9, 0x79, 0xc5, 0xa9, 0x42, 0xfc, 0x5c, 0xcc, 0x69,
	0xf1, 0x30, 0x45, 0x4c, 0x69, 0x7e, 0x46, 0xc9, 0x50, 0x73, 0xf2, 0x12, 0x93, 0x33, 0x83, 0x53,
	0x8b, 0xca, 0x32, 0x93, 0x53, 0x85, 0xfc, 0xb9, 0x84, 0xdc, 0x53, 0x4b, 0xe0, 0xc2, 0x7e, 0xa5,
	0xb9, 0x49, 0xa9, 0x45, 0x42, 0xd2, 0x7a, 0x08, 0xe7, 0xa0, 0x5b, 0x2d, 0x25, 0x83, 0x5d, 0x12,
	0x62, 0x6b, 0x12, 0x1b, 0xd8, 0xf9, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x94, 0x98, 0xe6,
	0x7c, 0xd8, 0x00, 0x00, 0x00,
}
